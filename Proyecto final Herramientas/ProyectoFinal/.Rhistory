library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
plot(mapCol)
head(mapCol@data)
# Chunk 1: get data
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
dataColombia=read.csv(filename, stringsAsFactors = FALSE)
# Chunk 2
library(stargazer)
vars<- colb[,c(1:5)]
stargazer(vars, title = "Medias Estadisticas", label = "Status",summary.stat = c("n","min","median","max","Mean"))
# Chunk 3: histogramas
par(mfrow=c(2,2))
paleta= "Red"
hist(colb$IDH,main = "Histograma IDH",col=paleta)
paleta2="blue"
hist(colb$Poblaci..n.Cabecera,main = "Histograma Cabecera",col = paleta2)
Paleta3= "Green"
hist(colb$Poblaci..n.Resto,main = "Histograma Resto",col = Paleta3)
hist(colb$Poblaci..n.Total,main = "Histograma pob Total",col = paleta2)
# Chunk 4: HistogramasAjustados
par(mfrow=c(2,3))
CabeceraLog= log10(colb$Poblaci..n.Cabecera)
RestoLog= log10(colb$Poblaci..n.Resto)
TotalLog =log10(colb$Poblaci..n.Total)
hist(CabeceraLog,main = "CabeceraLog",col = paleta2)
hist(RestoLog,main = "RestoLog",col = Paleta3)
hist(TotalLog,main = "TotalLog",col = paleta2)
# Chunk 5: trasformacionDatos
library(stargazer)
colb$Cabecera.Ajustada= log(colb$Poblaci..n.Cabecera)
colb$Resto.Ajustada= log(colb$Poblaci..n.Resto)
vars <- colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max","Mean"))
# Chunk 6: corIDH
explanans = (names(dataColombia)[c(3,4,5)])
corIDH = cor(dataColombia[,1],log10(dataColombia[,(explanans)]),
use = "na.or.complete")
stargazer(corIDH, title="Correlacion del IDH con las poblaciones",label = "corIDH")
# Chunk 7: corrTableX
corrTableX = round(cor(log10(dataColombia[explanans]),
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
# Hide upper triangle
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="Correlacion entre variables independientes",label = 'corrTableX')
# Chunk 8: corrPlotX
library(corrplot)
corrplot(corrTableX_copy, type = "lower", diag = F,
addCoef.col = "black")
# Chunk 9: regresiones
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
# Chunk 10: regresionesPlot
stargazer(LinRegA,LinRegB,
title = "Modelos de Regresion",
label = "regresiones")
# Chunk 11: getMap
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
plot(mapCol)
head(mapCol@data)
# Chunk 12: getMap1
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
# Chunk 13: getMapconglomerado
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
# grafico mapa basico
plot(mapCol,col='grey',border=0)
# grafico mapa cluster
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb = colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
plot(mapCol)
head(mapCol@data)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,dimensions]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster = mapCol_idh@data[ , c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
head(mapCol@data)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh = merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
nrow(mapCol_idh)  # todas!!..
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# nombre de la variables que usaré:
dimensions= c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster = mapCol_idh@data[1,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
## APLICANDO TECNICA KMEANS
# calculo 3 clusters
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# añado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# lo tengo?
names(mapCol_idh)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
dimensions=c("NAME_1","IDH","CabeLog","RestoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=lapply(dataCluster[,-1],as.ordered)
row.names(dataCluster)=dataCluster$NAME
dist=daisy(dataCluster[,-1],metric = "gower")
pam_fit <- pam(dist, diss = TRUE, k = 3)
clusters=as.data.frame(pam_fit$clustering)
clusters$NAME=row.names(clusters)
names(clusters)=c('cluster','NAME')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME',all.x=F)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c("NAME_1","IDH","cabeLog","restoLog")]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,4]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
dimensions = ("Name_1")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,4]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
dimensions = ("Name_1")
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,1]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
setwd("~/Documents/GitHub/Proyecto final Herramientas/ProyectoFinal")
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
dimensions=c("NAME_1","IDH","cabeceraLog","restoLog")
library(cluster)
# creo un nuevo data frame con esas:
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
dimensions=c("NAME","EconomicFreedom","PressFreedom","Democracy")
library(cluster)
dataCluster=colRegsIdx@data[,c(dimensions)]
dataCluster[,-1]=lapply(dataCluster[,-1],as.ordered)
row.names(dataCluster)=dataCluster$NAME
dist=daisy(dataCluster[,-1],metric = "gower")
pam_fit <- pam(dist, diss = TRUE, k = 3)
clusters=as.data.frame(pam_fit$clustering)
clusters$NAME=row.names(clusters)
names(clusters)=c('cluster','NAME')
colRegsIdx=merge(colRegsIdx,clusters, by='NAME',all.x=F)
View(LinRegA)
View(LinRegA)
View(mapCol_idh)
View(mapCol_idh)
